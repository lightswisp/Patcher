#!/usr/bin/ruby
require 'colorize'
require 'optparse'

def get_buffer_from_file(filename)
  file = File.open(filename)
  buffer = []

  buffer << file.readbyte.to_s(16).rjust(2, '0').upcase until file.eof?
  file.close
  buffer
end

def sig_scan(buffer, signature)
  offsets = []

  buffer.each_with_index do |el, i|
    next unless el == signature[0]

    # found first entry of the signature
    signature[1..-1].each_with_index do |sig_el, sig_i|
      break unless buffer[i + (sig_i + 1)] == sig_el || sig_el == 'XX'
      next if (sig_i + 1) != signature.size - 1

      # we haven't yet reached the end of the signature

      # we reached the end of the signature and everything matched
      offsets << i
      break

      # first check was failed, breaking from the inner loop
    end
  end
  offsets
end

ARGV << '-h' if ARGV.empty?

options = {}

begin
  OptionParser.new do |opts|
    opts.banner = "Usage: #{__FILE__} [options]"

    opts.on('-h', '--help', 'Display this screen') do
      puts opts
      exit(-1)
    end

    opts.on('-fFILE', '--file=FILE', 'Filename of the binary to patch') do |fname|
      options[:file] = fname
    end

    opts.on('-sSIG', '--signature=SIG', 'Byte sequence signature to find, ex "0F 85 C0 01 00 00"') do |sig|
      options[:sig] = sig
    end

    opts.on('-pSIG', '--patch=SIG', 'Byte sequence for patching, ex "0F 84 C0 01 00 00"') do |sig|
      options[:patch] = sig
    end
  end.parse!
rescue OptionParser::InvalidOption
  puts 'Invalid option!'.red.bold
  exit(-1)
end

unless options[:file]
  puts 'No arguments were provided for -f/--file flag!'.red.bold
  exit(-1)
end

unless options[:sig]
  puts 'No arguments were provided for -s/--signature flag!'.red.bold
  exit(-1)
end

unless options[:patch]
  puts 'No arguments were provided for -p/--patch flag!'.red.bold
  exit(-1)
end

unless File.exist?(options[:file])
  puts "File doesn't exist!".red.bold
  exit(-1)
end

if File.zero?(options[:file])
  puts 'File is empty!'.red.bold
  exit(-1)
end

buffer = get_buffer_from_file(options[:file])
signature = options[:sig].upcase.split(' ')
patch = options[:patch].upcase.split(' ')
offsets = sig_scan(buffer, signature)

if offsets.empty?
  puts "Couldn't find anything with this signature #{options[:sig]}".red.bold
  exit(-1)
end

puts "We got #{offsets.size} offsets".green

offsets.each do |offset|
  puts '0x' + offset.to_s(16)
end

puts "Choosing first offset by default: 0x#{offsets[0].to_s(16)}"
bytes_written = IO.binwrite(options[:file], [patch.map { |e| e.downcase }.join].pack('H*'), offsets[0])

puts "Written #{bytes_written} bytes"
